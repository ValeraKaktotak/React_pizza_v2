import React, { useEffect, useRef } from 'react'
import { useNavigate } from 'react-router-dom'
import { useSelector } from 'react-redux'
import qs from 'qs'
import Categories from 'components/Categories'
import Sort from 'components/Sort'
import PizzaBlock from 'components/PizzaBlock'
import Skeleton from 'components/PizzaBlock/Skeleton'
import Paginator from 'components/Paginator'
import { sortList } from 'components/Sort'
import { changeCategory, urlQueryState, selectFilter } from 'redux/slices/filterSlice'
import { fetchPizzas, selectPizzas } from 'redux/slices/pizzasSlice'
import { useAppDispatch } from 'redux/store'

const Home:React.FC = () => {
  const dispatch = useAppDispatch()
  const navigate = useNavigate()

  //pizzas reducer
  const { items, status } = useSelector(selectPizzas)

  //filter reducer
  const { categoryValue, sortType, sortOrder, paginatorPage, searchValue } = useSelector(selectFilter)

  let isUrlQuery = useRef(false)
  let isMounted = useRef(false)

  //–§—É–Ω-—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –¥–µ–ª–∞–µ—Ç –∞–∫—Å–∏–æ—Å –∑–∞–ø—Ä–æ—Å
  function axiosPizzas() {
    //@ts-ignore
    dispatch(fetchPizzas({ categoryValue, searchValue, sortType, sortOrder, paginatorPage }))
  }

  // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –¥–∏—Å–ø–∞—Ç—á–∏—Ç –∏—Ö –≤ —Ä–µ–¥–∞–∫—Å
  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1))
      const sortType = sortList.find((obj) => obj.type === params.sortType)
      dispatch(urlQueryState({ ...params, sortType }))
      isUrlQuery.current = true
    }
  }, [])

  //–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Å–∏–æ—Å –∑–∞–ø—Ä–æ—Å –∫ –ê–ü–ò
  useEffect(() => {
    if (!isUrlQuery.current) {
      axiosPizzas()
    }
    isUrlQuery.current = false
    window.scrollTo(0, 0)
  }, [categoryValue, sortType, sortOrder, searchValue, paginatorPage])

  //–ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –≤—à–∏–≤–∞–µ—Ç –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å —Ä–µ–¥–∞–∫—Å–∞
  useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        categoryValue,
        sortType: sortType.type,
        sortOrder,
        paginatorPage,
        searchValue,
      })
      navigate(`/?${queryString}`)
    }
    isMounted.current = true
  }, [categoryValue, sortType, sortOrder, searchValue, paginatorPage, navigate])

  const changeCatHandle = React.useCallback((id:number) => {
    dispatch(changeCategory(id))
  }, [])

  return (
    <div className="container">
      <div className="content__top">
        <Categories
          categoryValue={categoryValue}
          onChangeCategory={changeCatHandle}
        />
        <Sort />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === 'error' ? (
        <div className="content__error-info">
          <h1>
            üòï
            <br />
            <span>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</span>
          </h1>
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è</p>
        </div>
      ) : (
        <div className="content__items">
          {status === 'loading'
            ? [...new Array(6)].map((_, index) => <Skeleton key={index} />)
            : items.map((item, index:number) => <PizzaBlock key={index} {...item} />)}
        </div>
      )}
      <Paginator />
    </div>
  )
}

export default Home
